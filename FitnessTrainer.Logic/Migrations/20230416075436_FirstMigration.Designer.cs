// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainingManager.Logic.Storage;

#nullable disable

namespace TrainingManager.Logic.Migrations
{
    [DbContext(typeof(StorageContext))]
    [Migration("20230416075436_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryOfBodyExercise", b =>
                {
                    b.Property<string>("CategoryOfBodiesCode")
                        .HasColumnType("text");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoryOfBodiesCode", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("CategoryOfBodyExercise");
                });

            modelBuilder.Entity("ExerciseTrainingProgramDay", b =>
                {
                    b.Property<long>("ExercisesId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TrainingProgramDaysId")
                        .HasColumnType("uuid");

                    b.HasKey("ExercisesId", "TrainingProgramDaysId");

                    b.HasIndex("TrainingProgramDaysId");

                    b.ToTable("ExerciseTrainingProgramDay");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Approach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfTraining")
                        .HasColumnType("integer");

                    b.Property<long>("TrainingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Approach");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.ApproachItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Hard")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfApproach")
                        .HasColumnType("integer");

                    b.Property<int>("Technicality")
                        .HasColumnType("integer");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<Guid>("approachId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("approachId");

                    b.ToTable("ApproachItem");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.CategoryOfBody", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<string>("Decsription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("AvatarId");

                    b.ToTable("CategoryOfBody");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Exercise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("HardSkill")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBased")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Goal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SizeItemId")
                        .HasColumnType("uuid");

                    b.Property<long?>("TrainingProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("SizeItemId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Size", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.SizeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeUnitsOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SizeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyCode");

                    b.HasIndex("CodeUnitsOfMeasurement");

                    b.HasIndex("SizeId");

                    b.ToTable("SizeItem");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.SubGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeUnitsOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GoalId")
                        .HasColumnType("bigint");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BodyCode");

                    b.HasIndex("CodeUnitsOfMeasurement");

                    b.HasIndex("GoalId");

                    b.ToTable("SubGoal");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Training", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TrainingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("TrainingProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.TrainingProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("TrainingProgram");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.TrainingProgramDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DayRelax")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTrainingProgram")
                        .HasColumnType("integer");

                    b.Property<long>("TrainingProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramDay");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.UnitsOfMeasurement", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("UnitsOfMeasurements");
                });

            modelBuilder.Entity("CategoryOfBodyExercise", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.CategoryOfBody", null)
                        .WithMany()
                        .HasForeignKey("CategoryOfBodiesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManager.Logic.Storage.Domain.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTrainingProgramDay", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManager.Logic.Storage.Domain.TrainingProgramDay", null)
                        .WithMany()
                        .HasForeignKey("TrainingProgramDaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Approach", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId");

                    b.HasOne("TrainingManager.Logic.Storage.Domain.Training", "Training")
                        .WithMany("Approachs")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.ApproachItem", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.Approach", "approach")
                        .WithMany("ApproachsItems")
                        .HasForeignKey("approachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("approach");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.CategoryOfBody", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Exercise", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Image", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.Exercise", null)
                        .WithMany("Images")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("TrainingManager.Logic.Storage.Domain.SizeItem", null)
                        .WithMany("Images")
                        .HasForeignKey("SizeItemId");

                    b.HasOne("TrainingManager.Logic.Storage.Domain.TrainingProgram", null)
                        .WithMany("Images")
                        .HasForeignKey("TrainingProgramId");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.SizeItem", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.CategoryOfBody", "Body")
                        .WithMany()
                        .HasForeignKey("BodyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManager.Logic.Storage.Domain.UnitsOfMeasurement", "UnitsOfMeasurement")
                        .WithMany()
                        .HasForeignKey("CodeUnitsOfMeasurement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManager.Logic.Storage.Domain.Size", "Size")
                        .WithMany("SizeItems")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");

                    b.Navigation("Size");

                    b.Navigation("UnitsOfMeasurement");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.SubGoal", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.CategoryOfBody", "Body")
                        .WithMany()
                        .HasForeignKey("BodyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManager.Logic.Storage.Domain.UnitsOfMeasurement", "UnitsOfMeasurement")
                        .WithMany()
                        .HasForeignKey("CodeUnitsOfMeasurement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManager.Logic.Storage.Domain.Goal", "Goal")
                        .WithMany("SubGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");

                    b.Navigation("Goal");

                    b.Navigation("UnitsOfMeasurement");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Training", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.TrainingProgram", "TrainingProgram")
                        .WithMany()
                        .HasForeignKey("TrainingProgramId");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.TrainingProgram", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.TrainingProgramDay", b =>
                {
                    b.HasOne("TrainingManager.Logic.Storage.Domain.TrainingProgram", "TrainingProgram")
                        .WithMany("Days")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Approach", b =>
                {
                    b.Navigation("ApproachsItems");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Exercise", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Goal", b =>
                {
                    b.Navigation("SubGoals");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Size", b =>
                {
                    b.Navigation("SizeItems");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.SizeItem", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.Training", b =>
                {
                    b.Navigation("Approachs");
                });

            modelBuilder.Entity("TrainingManager.Logic.Storage.Domain.TrainingProgram", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
